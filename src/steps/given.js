"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("@cucumber/cucumber");
const closeAllButFirstTab_1 = __importDefault(require("../support/action/closeAllButFirstTab"));
const openWebsite_1 = __importDefault(require("../support/action/openWebsite"));
const setWindowSize_1 = __importDefault(require("../support/action/setWindowSize"));
const checkContainsAnyText_1 = __importDefault(require("../support/check/checkContainsAnyText"));
const checkContainsText_1 = __importDefault(require("../support/check/checkContainsText"));
const checkCookieContent_1 = __importDefault(require("../support/check/checkCookieContent"));
const checkCookieExists_1 = __importDefault(require("../support/check/checkCookieExists"));
const checkDimension_1 = __importDefault(require("../support/check/checkDimension"));
const checkElementExists_1 = __importDefault(require("../support/check/checkElementExists"));
const checkEqualsText_1 = __importDefault(require("../support/check/checkEqualsText"));
const checkIsEmpty_1 = __importDefault(require("../support/check/checkIsEmpty"));
const checkModal_1 = __importDefault(require("../support/check/checkModal"));
const checkOffset_1 = __importDefault(require("../support/check/checkOffset"));
const checkProperty_1 = __importDefault(require("../support/check/checkProperty"));
const checkSelected_1 = __importDefault(require("../support/check/checkSelected"));
const checkTitle_1 = __importDefault(require("../support/check/checkTitle"));
const checkURL_1 = __importDefault(require("../support/check/checkURL"));
const compareText_1 = __importDefault(require("../support/check/compareText"));
const isDisplayed_1 = __importDefault(require("../support/check/isDisplayed"));
const isEnabled_1 = __importDefault(require("../support/check/isEnabled"));
(0, cucumber_1.Given)(/^I open the (url|site) "([^"]*)?"$/, openWebsite_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" is( not)* displayed$/, isDisplayed_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" is( not)* enabled$/, isEnabled_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" is( not)* selected$/, checkSelected_1.default);
(0, cucumber_1.Given)(/^the checkbox "([^"]*)?" is( not)* checked$/, checkSelected_1.default);
(0, cucumber_1.Given)(/^there is (an|no) element "([^"]*)?" on the page$/, checkElementExists_1.default);
(0, cucumber_1.Given)(/^the title is( not)* "([^"]*)?"$/, checkTitle_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" contains( not)* the same text as element "([^"]*)?"$/, compareText_1.default);
(0, cucumber_1.Given)(/^the (button|element) "([^"]*)?"( not)* matches the text "([^"]*)?"$/, checkEqualsText_1.default);
(0, cucumber_1.Given)(/^the (button|element|container) "([^"]*)?"( not)* contains the text "([^"]*)?"$/, checkContainsText_1.default);
(0, cucumber_1.Given)(/^the (button|element) "([^"]*)?"( not)* contains any text$/, checkContainsAnyText_1.default);
(0, cucumber_1.Given)(/^the (button|element) "([^"]*)?" is( not)* empty$/, checkIsEmpty_1.default);
(0, cucumber_1.Given)(/^the page url is( not)* "([^"]*)?"$/, checkURL_1.default);
(0, cucumber_1.Given)(/^the( css)* attribute "([^"]*)?" from element "([^"]*)?" is( not)* "([^"]*)?"$/, checkProperty_1.default);
(0, cucumber_1.Given)(/^the cookie "([^"]*)?" contains( not)* the value "([^"]*)?"$/, checkCookieContent_1.default);
(0, cucumber_1.Given)(/^the cookie "([^"]*)?" does( not)* exist$/, checkCookieExists_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" is( not)* ([\d]+)px (broad|tall)$/, checkDimension_1.default);
(0, cucumber_1.Given)(/^the element "([^"]*)?" is( not)* positioned at ([\d]+)px on the (x|y) axis$/, checkOffset_1.default);
(0, cucumber_1.Given)(/^I have a screen that is ([\d]+) by ([\d]+) pixels$/, setWindowSize_1.default);
(0, cucumber_1.Given)(/^I have closed all but the first (window|tab)$/, closeAllButFirstTab_1.default);
(0, cucumber_1.Given)(/^a (alertbox|confirmbox|prompt) is( not)* opened$/, checkModal_1.default);
