"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("@cucumber/cucumber");
const waitFor_1 = __importDefault(require("../support/action/waitFor"));
const waitForDisplayed_1 = __importDefault(require("../support/action/waitForDisplayed"));
const checkClass_1 = __importDefault(require("../support/check/checkClass"));
const checkContainsAnyText_1 = __importDefault(require("../support/check/checkContainsAnyText"));
const checkContainsText_1 = __importDefault(require("../support/check/checkContainsText"));
const checkCookieContent_1 = __importDefault(require("../support/check/checkCookieContent"));
const checkCookieExists_1 = __importDefault(require("../support/check/checkCookieExists"));
const checkDimension_1 = __importDefault(require("../support/check/checkDimension"));
const checkEqualsText_1 = __importDefault(require("../support/check/checkEqualsText"));
const checkFocus_1 = __importDefault(require("../support/check/checkFocus"));
const checkFontProperty_1 = __importDefault(require("../support/check/checkFontProperty"));
const checkInURLPath_1 = __importDefault(require("../support/check/checkInURLPath"));
const checkIsEmpty_1 = __importDefault(require("../support/check/checkIsEmpty"));
const checkIsOpenedInNewWindow_1 = __importDefault(require("../support/check/checkIsOpenedInNewWindow"));
const checkModal_1 = __importDefault(require("../support/check/checkModal"));
const checkModalText_1 = __importDefault(require("../support/check/checkModalText"));
const checkNewWindow_1 = __importDefault(require("../support/check/checkNewWindow"));
const checkOffset_1 = __importDefault(require("../support/check/checkOffset"));
const checkProperty_1 = __importDefault(require("../support/check/checkProperty"));
const checkSelected_1 = __importDefault(require("../support/check/checkSelected"));
const checkTitle_1 = __importDefault(require("../support/check/checkTitle"));
const checkTitleContains_1 = __importDefault(require("../support/check/checkTitleContains"));
const checkURL_1 = __importDefault(require("../support/check/checkURL"));
const checkURLPath_1 = __importDefault(require("../support/check/checkURLPath"));
const checkWithinViewport_1 = __importDefault(require("../support/check/checkWithinViewport"));
const compareText_1 = __importDefault(require("../support/check/compareText"));
const isDisplayed_1 = __importDefault(require("../support/check/isDisplayed"));
const isEnabled_1 = __importDefault(require("../support/check/isEnabled"));
const isExisting_1 = __importDefault(require("../support/check/isExisting"));
const checkIfElementExists_1 = __importDefault(require("../support/lib/checkIfElementExists"));
(0, cucumber_1.Then)(/^I expect that the title is( not)* "([^"]*)?"$/, checkTitle_1.default);
(0, cucumber_1.Then)(/^I expect that the title( not)* contains "([^"]*)?"$/, checkTitleContains_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" does( not)* appear exactly "([^"]*)?" times$/, checkIfElementExists_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* displayed$/, isDisplayed_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" becomes( not)* displayed$/, waitForDisplayed_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* within the viewport$/, checkWithinViewport_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" does( not)* exist$/, isExisting_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?"( not)* contains the same text as element "([^"]*)?"$/, compareText_1.default);
(0, cucumber_1.Then)(/^I expect that (button|element) "([^"]*)?"( not)* matches the text "([^"]*)?"$/, checkEqualsText_1.default);
(0, cucumber_1.Then)(/^I expect that (button|element|container) "([^"]*)?"( not)* contains the text "([^"]*)?"$/, checkContainsText_1.default);
(0, cucumber_1.Then)(/^I expect that (button|element) "([^"]*)?"( not)* contains any text$/, checkContainsAnyText_1.default);
(0, cucumber_1.Then)(/^I expect that (button|element) "([^"]*)?" is( not)* empty$/, checkIsEmpty_1.default);
(0, cucumber_1.Then)(/^I expect that the url is( not)* "([^"]*)?"$/, checkURL_1.default);
(0, cucumber_1.Then)(/^I expect that the path is( not)* "([^"]*)?"$/, checkURLPath_1.default);
(0, cucumber_1.Then)(/^I expect the url to( not)* contain "([^"]*)?"$/, checkInURLPath_1.default);
(0, cucumber_1.Then)(/^I expect that the( css)* attribute "([^"]*)?" from element "([^"]*)?" is( not)* "([^"]*)?"$/, checkProperty_1.default);
(0, cucumber_1.Then)(/^I expect that the font( css)* attribute "([^"]*)?" from element "([^"]*)?" is( not)* "([^"]*)?"$/, checkFontProperty_1.default);
(0, cucumber_1.Then)(/^I expect that checkbox "([^"]*)?" is( not)* checked$/, checkSelected_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* selected$/, checkSelected_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* enabled$/, isEnabled_1.default);
(0, cucumber_1.Then)(/^I expect that cookie "([^"]*)?"( not)* contains "([^"]*)?"$/, checkCookieContent_1.default);
(0, cucumber_1.Then)(/^I expect that cookie "([^"]*)?"( not)* exists$/, checkCookieExists_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* ([\d]+)px (broad|tall)$/, checkDimension_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* positioned at ([\d+.?\d*]+)px on the (x|y) axis$/, checkOffset_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" (has|does not have) the class "([^"]*)?"$/, checkClass_1.default);
(0, cucumber_1.Then)(/^I expect a new (window|tab) has( not)* been opened$/, checkNewWindow_1.default);
(0, cucumber_1.Then)(/^I expect the url "([^"]*)?" is opened in a new (tab|window)$/, checkIsOpenedInNewWindow_1.default);
(0, cucumber_1.Then)(/^I expect that element "([^"]*)?" is( not)* focused$/, checkFocus_1.default);
(0, cucumber_1.Then)(/^I wait on element "([^"]*)?"(?: for (\d+)ms)*(?: to( not)* (be checked|be enabled|be selected|be displayed|contain a text|contain a value|exist))*$/, {
    wrapperOptions: {
        retry: 3,
    },
}, waitFor_1.default);
(0, cucumber_1.Then)(/^I expect that a (alertbox|confirmbox|prompt) is( not)* opened$/, checkModal_1.default);
(0, cucumber_1.Then)(/^I expect that a (alertbox|confirmbox|prompt)( not)* contains the text "([^"]*)?"$/, checkModalText_1.default);
